openapi: 3.0.0
info:
  title: Workbench Docs API
  version: "0.1.5"
servers:
  - url: http://127.0.0.1:9008/
    description: Local development server

paths:
  /v1/documents:
    get:
      summary: List all documents of the user
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: page_size
          schema:
            type: integer
            default: 10
        - in: query
          name: order_by
          schema:
            type: string
            enum: [created_at, updated_at]
            default: created_at
        - in: query
          name: order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentListResponse"

    post:
      summary: Create a document
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DocumentCreateRequest"
      responses:
        "201":
          description: created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Document"

  /v1/documents/{document_id}:
    get:
      summary: Get details of a document
      parameters:
        - in: path
          name: document_id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Document"
        "404":
          description: Document not found or access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      summary: Update a document
      parameters:
        - in: path
          name: document_id
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DocumentUpdateRequest"
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Document"
        "404":
          description: Document not found or access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      summary: Delete a document
      parameters:
        - in: path
          name: document_id
          schema:
            type: string
          required: true
      responses:
        "204":
          description: no content
        "404":
          description: Document not found or access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/documents/details:
    post:
      summary: Get documents by a list of IDs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DocumentDetailsRequest"
      responses:
        "200":
          description: A list of documents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Document"
        "400":
          description: Bad request, no IDs provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  
  /v1/export:
    get:
      summary: Export a document
      parameters:
        - in: query
          name: id
          schema:
            type: string
          required: true
        - in: query
          name: format
          schema:
            type: string
            enum:
              - markdown
              - html
          required: true
      responses:
        "200":
          description: Exported document
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentExportResponse"
        "400":
          description: Invalid format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Document not found or access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /v1/state:
    get:
      summary: Convert content to Lexical state
      parameters:
        - in: query
          name: content
          schema:
            type: string
          required: true
        - in: query
          name: type
          schema:
            type: string
            enum:
              - markdown
              - html
          required: true
      responses:
        "200":
          description: Lexical state
          content:
            application/json:
              schema:
                type: object
        "400":
          description: Invalid format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  schemas:
    Document:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
        title:
          type: string
        state:
          type: object
        extra:
          type: object
        created_at:
          type: integer
        updated_at:
          type: integer
        deleted_at:
          type: integer
          nullable: true
      required:
        - id
        - user_id
        - title

    DocumentCreateRequest:
      type: object
      properties:
        title:
          type: string
        state:
          type: object
        extra:
          type: object

    DocumentUpdateRequest:
      type: object
      properties:
        title:
          type: string
        state:
          type: object
        extra:
          type: object

    DocumentListResponse:
      type: object
      properties:
        total:
          type: integer
          description: Total number of items
        pages:
          type: integer
          description: Total number of pages
        page:
          type: integer
          description: Current page number
        page_size:
          type: integer
          description: Number of items per page
        items:
          type: array
          items:
            $ref: "#/components/schemas/Document"
    
    DocumentDetailsRequest:
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
      required:
        - ids
    
    DocumentExportResponse:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        content:
          type: string
      required:
        - id
        - title
        - content

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
      required:
        - error
      
